)
best_model_nn_1_layer_all
best_model_nn_1_layer_all  <- grid_search_nn_model_generaL_optimizer(train_df,
dropout_rates = list(0),
num_layers = 1,
batch_sizes = list(7000),
epochs = 200,
learning_rates = list(0.8),
patience_list = list(1),
verbose = 0
)
best_model_nn_1_layer_test  <- grid_search_nn_model_generaL_optimizer(train_df,
dropout_rates = list(0),
num_layers = 1,
batch_sizes = list(7000),
epochs = 200,
learning_rates = list(0.8),
patience_list = list(1),
verbose = 0
)
best_model_nn_1_layer_test  <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0),
num_layers = 1,
batch_sizes = list(7000),
epochs = 200,
learning_rates = list(0.8),
patience_list = list(1),
verbose = 0
)
best_model_nn_1_layer_test
best_model_nn_1_layer_test %>% save_model_hdf5(file = "test")
help(save_model_hdf5)
best_model_nn_1_layer_test %>% save_model_hdf5(filepath = "test")
save_model_hdf5(best_model_nn_1_layer_test, filepath = "test")
save_model_hdf5(best_model_nn_1_layer_test, filepath = "test/")
save_model_tf(best_model_nn_1_layer_test, filepath = "test/")
save_model_tf
#### Test save
library(keras)
save_model_tf(best_model_nn_1_layer_test, filepath = "test/")
conda_python(envname = "r-reticulate") # Create miniconda enviroment (if not already done)
tensorflow::use_condaenv("r-reticulate") # Specify enviroment to tensorflow
library(tensorflow)
library(keras)
library(tfdatasets)
library(reticulate)
save_model_tf(best_model_nn_1_layer_test, filepath = "test/")
best_model_nn_1_layer_test
save_model_tf(best_model_nn_1_layer_test[[2]], filepath = "test/")
save_model_tf(best_model_nn_1_layer_test[[1]], filepath = "test/")
load_model_tf( filepath = "test/")
help(load_model_tf)
load_model_tf( best_model_nn_1_layer_test,filepath = "test/")
load_model_tf("test/")
save_model_hdf5(best_model_nn_1_layer_test[[1]], filepath = "test/")
save_model_hdf5(best_model_nn_1_layer_test[[1]], overwrite = T, filepath = "test/")
help(save_model_hdf5)
save_model_hdf5(best_model_nn_1_layer_test[[1]], overwrite = T, filepath = "test/")
save_model_tf(best_model_nn_1_layer_test[[1]], overwrite = T, filepath = "test/")
load_model_tf("test/")
save_model_tf(best_model_nn_1_layer_test[[1]], overwrite = T, filepath = "test")
load_model_tf("test")
test <- load_model_tf("test")
save_model_tf(best_model_nn_1_layer_test[[2]], overwrite = T, filepath = "test")
save_model_tf(best_model_nn_1_layer_test[[1]], overwrite = T, filepath = "test")
test <- load_model_tf("test")
save_model_tf(best_model_nn_1_layer_test[[1]], overwrite = T, filepath = "my_model.h5")
test <- load_model_tf("my_model.h5")
save_model_hdf5(best_model_nn_1_layer_test[[1]], overwrite = T, filepath = "my_model.h5")
test <- load_model_hdf5("my_model.h5")
load_model_hdf5("my_model.h5")
# Libraries --------------------------------------------------------------------
library(tidyverse)
library(magrittr)
library(tidymodels)
library(randomForest)
library(caret)
library(doParallel)
library(MLmetrics)
library(gbm)
library(PerformanceAnalytics)
library(kableExtra)
library(knitr)
library(monomvn)
library(kableExtra)
library(lubridate)
library(kknn)
library(nnet)
### Load keras and tensorflow ###
library(tensorflow)
library(keras)
library(tfdatasets)
library(reticulate)
#set_random_seed (42, disable_gpu = FALSE) # Set seed for reproducability, both tensorflow and R native seed
set.seed(1)
conda_python(envname = "r-reticulate") # Create miniconda enviroment (if not already done)
tensorflow::use_condaenv("r-reticulate") # Specify enviroment to tensorflow
################################################################################
########################## Train and Test Split ################################
################################################################################
######### Dataframe with all companies using only variance and correlation filter#############
# Load all
load(file = "cached_data/train_test.Rdata")
# Or run the code in preprocessing
################################################################################
######################### Load or run models ###################################
################################################################################
# In order to save run time one can choose to load the model results
load(file = "models/models.Rdata")
make_0_benchmark <- function(selected_test_df) {
#' Makes a zero benchmark to compare models
#' @
benchmark_0 <- postResample(rep(0, nrow(selected_test_df)), selected_test_df$retx)
return (benchmark_0)
}
# Neural network using specified number of layers  ---------------------------------------
print_dot_callback <- callback_lambda(
#' Simplified callback, showing dots instead of full loss/validation error plots
on_epoch_end = function(epoch, logs) {
if (epoch %% 80 == 0) cat("\n")
cat(".")
}
)
build_nn_model_5_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 4, activation = "relu") %>%
layer_dropout(dropout_rate) %>%
layer_dense(units = 2)
model <- keras_model(input, output)
return (model)
}
build_nn_model_4_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(dropout_rate) %>%
layer_dense(units = 4)
model <- keras_model(input, output)
return (model)
}
build_nn_model_3_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output %<>%
layer_dense(units = 8)
model <- keras_model(input, output)
return(model)
}
build_nn_model_2_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16)
model <- keras_model(input, output)
return(model)
}
build_nn_model_1_layer <- function(selected_train_df, selected_spec) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32)
model <- keras_model(input, output)
return(model)
}
build_model <- function(selected_train_df, selected_spec, num_layers, batch_normalization, dropout_rate) {
if (num_layers == 1) {
output_model = build_nn_model_1_layer(selected_train_df, selected_spec)
}
else if (num_layers == 2) {
output_model = build_nn_model_2_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 3) {
output_model = build_nn_model_3_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 4) {
output_model = build_nn_model_4_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 5) {
output_model = build_nn_model_5_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
return (output_model)
}
grid_search_nn_model_generaL_optimizer <- function(model_train_df, dropout_rates, num_layers,
learning_rates, epochs, batch_sizes, patience_list,  verbose) {
selected_spec <- feature_spec(model_train_df, retx ~ . ) %>%
step_numeric_column(all_numeric(), -costat, normalizer_fn = scaler_standard()) %>% # Scale numeric features
step_categorical_column_with_vocabulary_list(costat) %>%  # non-numeric variables
fit()
best_MAE <- Inf
best_model <- NA
best_history <- NA
batch_normalizations <- list(T, F)
if (num_layers == 1) {batch_normalizations <- list(F)}
for (dropout_rate in dropout_rates) {
for (learn_rate in learning_rates) {
for (batch_normalization in batch_normalizations) {
for (batch_size in batch_sizes) {
for (patience in patience_list) {
selected_model = build_model(model_train_df, selected_spec, num_layers, batch_normalization, dropout_rate)
reduce_lr = callback_reduce_lr_on_plateau(monitor = "val_loss", patience = patience)
new_early_stop = callback_early_stopping(monitor = "val_loss", patience = patience + 10)
optimizer = optimizer_adam(learning_rate = learn_rate) # Adam optimizer at different starting learning rates
new_model = selected_model %>%
compile(
loss = "mse",
optimizer = optimizer,
metrics = list("mean_absolute_error"))
new_history = new_model %>%
fit(
x = model_train_df %>% dplyr::select(-retx),
y = model_train_df$retx,
epochs = epochs,
batch_size = batch_size,
validation_split = 0.2,
verbose = verbose,
callbacks = list(print_dot_callback, reduce_lr, new_early_stop) #Print simplified dots, and stop learning when validation improvements stalls
)
mae_list_length =  new_history$metrics$val_mean_absolute_error %>% length()
new_mae =  new_history$metrics$val_mean_absolute_error[[mae_list_length]]
print(paste("> MAE of new model", new_mae))
if (new_mae < best_MAE) {
best_history <- new_history
best_model <- new_model
best_MAE <- new_mae
print(paste(">New best model. MAE of new model", best_MAE))
print(paste(">Batch size", batch_size))
print(paste(">dropout_rate", dropout_rate))
print(paste("> Learning rate", learn_rate))
print(paste("> Patience", patience))
print(paste(">Batch normalization", batch_normalization))
}
}
}
}
}
}
return (list(best_model, best_history))
}
#load nn models
#load("models/3_nn_layer_model_history.Rdata")
### ADAM optimizer
#adam_opt = optimizer_adam(learning_rate = 0.1)
#rms_prop = optimizer_rmsprop(learning_rate = 0.9)
#adagrad_opt = optimizer_adagrad(learning_rate = 1)
#sgd_opt = optimizer_sgd(learning_rate = 0.8, momentum = 0.1)
############################## TESTING #################################
## Single layer
best_model_nn_1_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0),
num_layers = 1,
batch_sizes = list(500, 1000, 7000),
epochs = 200,
learning_rates = list(0.001, 0.1, 0.9),
patience_list = list(1, 5, 20,25),
verbose = 0
)
grid_search_nn_model_generaL_optimizer <- function(model_train_df, dropout_rates, num_layers,
learning_rates, epochs, batch_sizes, patience_list,  verbose) {
selected_spec <- feature_spec(model_train_df, retx ~ . ) %>%
step_numeric_column(all_numeric(), -costat) %>% # Scale numeric features
step_categorical_column_with_vocabulary_list(costat) %>%  # non-numeric variables
fit()
best_MAE <- Inf
best_model <- NA
best_history <- NA
batch_normalizations <- list(T, F)
if (num_layers == 1) {batch_normalizations <- list(F)}
for (dropout_rate in dropout_rates) {
for (learn_rate in learning_rates) {
for (batch_normalization in batch_normalizations) {
for (batch_size in batch_sizes) {
for (patience in patience_list) {
selected_model = build_model(model_train_df, selected_spec, num_layers, batch_normalization, dropout_rate)
reduce_lr = callback_reduce_lr_on_plateau(monitor = "val_loss", patience = patience)
new_early_stop = callback_early_stopping(monitor = "val_loss", patience = patience + 10)
optimizer = optimizer_adam(learning_rate = learn_rate) # Adam optimizer at different starting learning rates
new_model = selected_model %>%
compile(
loss = "mse",
optimizer = optimizer,
metrics = list("mean_absolute_error"))
new_history = new_model %>%
fit(
x = model_train_df %>% dplyr::select(-retx),
y = model_train_df$retx,
epochs = epochs,
batch_size = batch_size,
validation_split = 0.2,
verbose = verbose,
callbacks = list(print_dot_callback, reduce_lr, new_early_stop) #Print simplified dots, and stop learning when validation improvements stalls
)
mae_list_length =  new_history$metrics$val_mean_absolute_error %>% length()
new_mae =  new_history$metrics$val_mean_absolute_error[[mae_list_length]]
print(paste("> MAE of new model", new_mae))
if (new_mae < best_MAE) {
best_history <- new_history
best_model <- new_model
best_MAE <- new_mae
print(paste(">New best model. MAE of new model", best_MAE))
print(paste(">Batch size", batch_size))
print(paste(">dropout_rate", dropout_rate))
print(paste("> Learning rate", learn_rate))
print(paste("> Patience", patience))
print(paste(">Batch normalization", batch_normalization))
}
}
}
}
}
}
return (list(best_model, best_history))
}
best_model_nn_1_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0),
num_layers = 1,
batch_sizes = list(7000),
epochs = 200,
learning_rates = list( 0.9),
patience_list = list(1),
verbose = 0
)
best_model_nn_1_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0),
num_layers = 1,
batch_sizes = list(500),
epochs = 200,
learning_rates = list( 0.9),
patience_list = list(1),
verbose = 0
)
best_model_nn_1_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0),
num_layers = 1,
batch_sizes = list(500),
epochs = 200,
learning_rates = list( 0.9),
patience_list = list(5),
verbose = 0
)
grid_search_nn_model_generaL_optimizer <- function(model_train_df, dropout_rates, num_layers,
learning_rates, epochs, batch_sizes, patience_list,  verbose) {
selected_spec <- feature_spec(model_train_df, retx ~ . ) %>%
step_numeric_column(all_numeric(), -costat) %>% # Scale numeric features
step_categorical_column_with_vocabulary_list(costat) %>%  # non-numeric variables
fit()
best_MAE <- Inf
best_model <- NA
best_history <- NA
batch_normalizations <- list(T, F)
if (num_layers == 1) {batch_normalizations <- list(F)}
for (dropout_rate in dropout_rates) {
for (learn_rate in learning_rates) {
for (batch_normalization in batch_normalizations) {
for (batch_size in batch_sizes) {
for (patience in patience_list) {
selected_model = build_model(model_train_df, selected_spec, num_layers, batch_normalization, dropout_rate)
reduce_lr = callback_reduce_lr_on_plateau(monitor = "val_loss", patience = patience)
new_early_stop = callback_early_stopping(monitor = "val_loss", patience = patience + 10)
optimizer = optimizer_adam(learning_rate = learn_rate) # Adam optimizer at different starting learning rates
new_model = selected_model %>%
compile(
loss = "mse",
optimizer = optimizer,
metrics = list("mean_absolute_error"))
new_history = new_model %>%
fit(
x = model_train_df %>% dplyr::select(-retx),
y = model_train_df$retx,
epochs = epochs,
batch_size = batch_size,
validation_split = 0.2,
verbose = verbose,
callbacks = list(print_dot_callback, reduce_lr, new_early_stop) #Print simplified dots, and stop learning when validation improvements stalls
)
mae_list_length =  new_history$metrics$val_mean_absolute_error %>% length()
new_mae =  new_history$metrics$val_mean_absolute_error[[mae_list_length]]
print(paste("> MAE of new model", new_mae))
if (new_mae < best_MAE) {
best_history <- new_history
best_model <- new_model
best_MAE <- new_mae
print(paste(">New best model. MAE of new model", best_MAE))
print(paste(">Batch size", batch_size))
print(paste(">dropout_rate", dropout_rate))
print(paste("> Learning rate", learn_rate))
print(paste("> Patience", patience))
print(paste(">Batch normalization", batch_normalization))
}
}
}
}
}
}
return (list(best_model, best_history))
}
best_model_nn_1_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0),
num_layers = 1,
batch_sizes = list(500),
epochs = 200,
learning_rates = list( 0.9),
patience_list = list(5),
verbose = 0
)
grid_search_nn_model_generaL_optimizer <- function(model_train_df, dropout_rates, num_layers,
learning_rates, epochs, batch_sizes, patience_list,  verbose) {
selected_spec <- feature_spec(model_train_df, retx ~ . ) %>%
step_numeric_column(all_numeric(), -costat, normalizer_fn = scaler_standard()) %>% # Scale numeric features
step_categorical_column_with_vocabulary_list(costat) %>%  # non-numeric variables
fit()
best_MAE <- Inf
best_model <- NA
best_history <- NA
batch_normalizations <- list(T, F)
if (num_layers == 1) {batch_normalizations <- list(F)}
for (dropout_rate in dropout_rates) {
for (learn_rate in learning_rates) {
for (batch_normalization in batch_normalizations) {
for (batch_size in batch_sizes) {
for (patience in patience_list) {
selected_model = build_model(model_train_df, selected_spec, num_layers, batch_normalization, dropout_rate)
reduce_lr = callback_reduce_lr_on_plateau(monitor = "val_loss", patience = patience)
new_early_stop = callback_early_stopping(monitor = "val_loss", patience = patience + 10)
optimizer = optimizer_adam(learning_rate = learn_rate) # Adam optimizer at different starting learning rates
new_model = selected_model %>%
compile(
loss = "mse",
optimizer = optimizer,
metrics = list("mean_absolute_error"))
new_history = new_model %>%
fit(
x = model_train_df %>% dplyr::select(-retx),
y = model_train_df$retx,
epochs = epochs,
batch_size = batch_size,
validation_split = 0.2,
verbose = verbose,
callbacks = list(print_dot_callback, reduce_lr, new_early_stop) #Print simplified dots, and stop learning when validation improvements stalls
)
mae_list_length =  new_history$metrics$val_mean_absolute_error %>% length()
new_mae =  new_history$metrics$val_mean_absolute_error[[mae_list_length]]
print(paste("> MAE of new model", new_mae))
if (new_mae < best_MAE) {
best_history <- new_history
best_model <- new_model
best_MAE <- new_mae
print(paste(">New best model. MAE of new model", best_MAE))
print(paste(">Batch size", batch_size))
print(paste(">dropout_rate", dropout_rate))
print(paste("> Learning rate", learn_rate))
print(paste("> Patience", patience))
print(paste(">Batch normalization", batch_normalization))
}
}
}
}
}
}
return (list(best_model, best_history))
}
best_model_nn_1_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0),
num_layers = 1,
batch_sizes = list(500),
epochs = 200,
learning_rates = list( 0.9),
patience_list = list(5),
verbose = 0
)
save_model_hdf5(best_model_nn_1_layer_test[[1]], overwrite = T, filepath = "my_model.h5")
test <- load_model_hdf5("my_model.h5")
## First installation
library(reticulate)
conda_version()
conda_list()
conda_python(envname = "r-reticulate")
conda_install(envname = "r-reticulate",packages="r-tfdatasets")
