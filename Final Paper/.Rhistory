################# Final Paper ####################
################# Data Processing ####################
### Candidate numbers
#### Libraries #####
library(tidyverse)
library(magrittr)
library(tidytext)
library(dplyr)
library(kableExtra)
require(stringr)
require(pdftools)
##### Congress data ####
congress_speech_files <-  list.files(path = "data/congressional speech", pattern="*[0-9][0-9][0-9].txt")
congress_speakerMap_files <-  list.files(path = "data/congressional speech", pattern="*SpeakerMap.txt")
congress_speakerMap <- sapply(congress_speakerMap_files, function(x) read_delim(paste0("data/congressional speech/",x), delim = "|"))
congress_speech <- sapply(congress_speech_files, function(x) read_delim(paste0("data/congressional speech/",x), delim = "|"))
################################################################################
############################## Final Paper #####################################
################################################################################
# Candidate numbers
# set wd
#setwd("~/OneDrive - Norges HandelshÃ¸yskole/MASTER/BAN432/GitExam2021/BAN432/final_paper")
# Libraries --------------------------------------------------------------------
library(tidyverse)
library(magrittr)
library(tidytext)
library(dplyr)
library(kableExtra)
require(stringr)
require(pdftools)
library(quanteda)
library(tm)
library(SnowballC)
library(caret)
library(yardstick)
library(kableExtra)
library(textstem)    # in order to stem strings and not only single words
# Data pre-processing ----------------------------------------------------------
# Loading congress speeches
congress_speech_files <- list.files(path = "data/congressional speech",
pattern="*[0-9][0-9][0-9].txt")
# Loading speaker map
congress_speakerMap_files <- list.files(path = "data/congressional speech",
pattern="*SpeakerMap.txt")
# Processing file function
process_files <- function(filenames) {
#' @description     Processes a list of file names of text files
#'                  into a combined tidy data frame (tibble)
#'
#' @param filenames a character vector of file names
#' @return:         a tidy based tibble
df = tibble()
for (file in filenames) {
df %<>% bind_rows(read_delim(paste0("data/congressional speech/", file),
delim = "|"))
}
return (df)
}
# Combine data function
combine_data <- function() {
#'@description a function that left joins the congress speech data with
#'             the speaker including their gender, state and party.
#'             Only Republican (R) and Democrats (D), and saves
#'             the data for easier processing.
#'
#' @return     a data frame with congress speeches mapped to a speaker
congress_speech     <- process_files(congress_speech_files)
congress_speakerMap <- process_files(congress_speakerMap_files)
congress_speech_data <-
congress_speech                                  %>%
left_join(congress_speakerMap, by = "speech_id") %>%
select(-c(nonvoting, district, chamber))         %>%
filter(!is.na(speech),
party %in% c("D", "R"))
save(congress_speech_data,
file = "temp_data/congress_speech_data.Rdata")
return (congress_speech_data)
}
# Can either run the function or load the finished pre-processed data frame
" Uncomment to load congress data (Needs temp_data folder ) "
#congress_speech_data <- combine_data()
load(file = "temp_data/congress_speech_data.Rdata")
# Reducing number of rows for easier processing
congress_speech_data_reduced <- congress_speech_data[1:4000,]
#congress_speech_data <- combine_data()
load(file = "temp_data/congress_speech_data.Rdata")
getwd()
setwd("G:/Dokumenter/Google drive folder/NHH/Master/FIE453/repo/Final Paper")
# Libraries --------------------------------------------------------------------
library(tidyverse)
library(magrittr)
library(tidymodels)
library(randomForest)
library(caret)
library(doParallel)
library(MLmetrics)
library(gbm)
library(PerformanceAnalytics)
library(kableExtra)
library(knitr)
library(monomvn)
library(kableExtra)
library(lubridate)
library(kknn)
library(nnet)
setwd("G:/Dokumenter/Google drive folder/NHH/Master/FIE453/repo/Final Paper")
### Load keras and tensorflow ###
library(tensorflow)
library(keras)
library(tfdatasets)
library(reticulate)
#set_random_seed (42, disable_gpu = FALSE) # Set seed for reproducability, both tensorflow and R native seed
set.seed(1)
conda_python(envname = "r-reticulate") # Create miniconda enviroment (if not already done)
tensorflow::use_condaenv("r-reticulate") # Specify enviroment to tensorflow
######### Dataframe with all companies using only variance and correlation filter#############
# Load all
load(file = "cached_data/train_test.Rdata")
# Or run the code in preprocessing
##### Scale numeric features ####
scale_py <- function(x) {
#' R implementation which corresponds to python standard_scaler()
n <- nrow(x)
scaled_df <- scale(x, scale= apply(x, 2, sd) * sqrt(n-1/n))
return(scaled_df)
}
make_0_benchmark <- function(selected_test_df) {
#' Makes a zero benchmark to compare models
#' @
benchmark_0 <- postResample(rep(0, nrow(selected_test_df)), selected_test_df$retx)
return (benchmark_0)
}
# Neural network using specified number of layers  ---------------------------------------
print_dot_callback <- callback_lambda(
#' Simplified callback, showing dots instead of full loss/validation error plots
on_epoch_end = function(epoch, logs) {
if (epoch %% 80 == 0) cat("\n")
cat(".")
}
)
build_nn_model_5_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_batch_normalization() %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 4, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output %<>%   layer_dense(units = 2)
model <- keras_model(input, output)
return (model)
}
build_nn_model_4_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_batch_normalization() %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output %<>% layer_dense(units = 4)
model <- keras_model(input, output)
return (model)
}
build_nn_model_3_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_batch_normalization() %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output %<>%
layer_dense(units = 8)
model <- keras_model(input, output)
return(model)
}
build_nn_model_2_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_batch_normalization() %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16)
model <- keras_model(input, output)
return(model)
}
build_nn_model_1_layer <- function(selected_train_df, selected_spec) {
#'
#'@description:
#'
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_batch_normalization() %>%
layer_dense(units = 32)
model <- keras_model(input, output)
return(model)
}
build_model <- function(selected_train_df, selected_spec, num_layers, batch_normalization, dropout_rate) {
#'
#'@description: wrapper function which calls on the adequate nn-model building function based on the number of layers
#'wanted.
#'
#'
if      (num_layers == 1) {
output_model = build_nn_model_1_layer(selected_train_df, selected_spec)
}
else if (num_layers == 2) {
output_model = build_nn_model_2_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 3) {
output_model = build_nn_model_3_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 4) {
output_model = build_nn_model_4_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 5) {
output_model = build_nn_model_5_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
return (output_model)
}
grid_search_nn_model_generaL_optimizer <- function(model_train_df, dropout_rates, num_layers,
learning_rates, epochs, batch_sizes, patience_list,  verbose) {
selected_spec <- feature_spec(model_train_df, retx ~ . ) %>%
step_numeric_column(all_numeric(), -costat) %>% # Scale numeric features
step_categorical_column_with_vocabulary_list(costat) %>%  # non-numeric variables
fit()
best_MAE <- Inf
best_model <- NA
best_history <- NA
batch_normalizations <- list(T, F)
if (num_layers == 1) {batch_normalizations <- list(F)}
for (dropout_rate in dropout_rates) {
for (learn_rate in learning_rates) {
for (batch_normalization in batch_normalizations) {
for (batch_size in batch_sizes) {
for (patience in patience_list) {
selected_model = build_model(model_train_df, selected_spec, num_layers, batch_normalization, dropout_rate)
reduce_lr = callback_reduce_lr_on_plateau(monitor = "val_loss", patience = patience)
new_early_stop = callback_early_stopping(monitor = "val_loss", patience = patience + 10)
optimizer = optimizer_adam(learning_rate = learn_rate) # Adam optimizer at different starting learning rates
new_model = selected_model %>%
compile(
loss = "mse",
optimizer = optimizer,
metrics = list("mean_absolute_error"))
new_history = new_model %>%
fit(
x = model_train_df %>% dplyr::select(-retx),
y = model_train_df$retx,
epochs = epochs,
batch_size = batch_size,
validation_split = 0.2,
verbose = verbose,
use_multiprocessing = T,
callbacks = list(reduce_lr, new_early_stop) #Print simplified dots, and stop learning when validation improvements stalls
)
mae_list_length =  new_history$metrics$val_mean_absolute_error %>% length()
new_mae =  new_history$metrics$val_mean_absolute_error[[mae_list_length]]
print(paste("> MAE of new model", new_mae))
if (new_mae < best_MAE) {
best_history <- new_history
best_model <- new_model
best_MAE <- new_mae
print(paste(">New best model. MAE of new model", best_MAE))
print(paste(">Batch size", batch_size))
print(paste(">dropout_rate", dropout_rate))
print(paste("> Learning rate", learn_rate))
print(paste("> Patience", patience))
print(paste(">Batch normalization", batch_normalization))
}
}
}
}
}
}
return (list(best_model, best_history))
}
best_model_nn_3_layers_all <- grid_search_nn_model_generaL_optimizer(train_df,
dropout_rates = list(0, 0.25, 0.4),
num_layers = 3,
batch_sizes = list(500, 1000, 2000),
epochs = 200,
learning_rates = list(0.005, 0.1, 0.4),
patience_list = list(1, 5, 20),
verbose = 0
)
rm(evaluation_data)
rm(selection_data)
rm(company_names_df)
best_model_nn_3_layers_all <- grid_search_nn_model_generaL_optimizer(train_df,
dropout_rates = list(0, 0.25, 0.4),
num_layers = 3,
batch_sizes = list(500, 1000, 2000),
epochs = 200,
learning_rates = list(0.005, 0.1, 0.4),
patience_list = list(1, 5, 20),
verbose = 0
)
predictions_3_nn_model <- best_model_nn_3_layers_all[[1]] %>% predict(test_df %>% dplyr::select(-retx, -permno))
predictions_3_nn_model[ , 1]
postResample(predictions_3_nn_model[ , 1], test_df$retx)
## 3 NN
best_model_nn_3_layers_history <- best_model_nn_3_layers_all[[2]]
save(best_model_nn_3_layers_history, file = "models/3_nn_layers_model_history.Rdata") # Save model history
best_model_nn_3_layers_all[[1]]  %>% save_model_hdf5("models/3_layer_nn_model.hdf5") # Save model
best_model_nn_3_layers_history <- best_model_nn_3_layers_all[[2]]
save(best_model_nn_3_layers_history, file = "models/3_nn_layers_model_history.Rdata") # Save model history
best_model_nn_3_layers_all[[1]]  %>% save_model_hdf5("models/3_layer_nn_model.hdf5") # Save model
predictions_3_nn_model <- best_model_nn_3_layers_all[[1]] %>% predict(test_df %>% dplyr::select(-retx, -permno))
predictions_3_nn_model[ , 1]
postResample(predictions_3_nn_model[ , 1], test_df$retx)
predictions_3_nn_model <- best_model_nn_3_layers_all[[1]] %>% predict(test_df %>% dplyr::select(-retx, -permno))
predictions_3_nn_model[ , 1]
postResample(predictions_3_nn_model[ , 1], test_df$retx)
best_model_nn_3_layers_history <- best_model_nn_3_layers_all[[2]]
save(best_model_nn_3_layers_history, file = "models/3_nn_layers_model_history.Rdata") # Save model history
best_model_nn_3_layers_all[[1]]  %>% save_model_hdf5("models/3_layers_nn_model.hdf5") # Save model
