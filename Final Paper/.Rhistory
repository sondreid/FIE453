filter(permno == company[i, 2])
}
for (i in 1:nrow(selected_stocks)) {
print(selected_stocks[i, `Company name`])
}
for (i in 1:nrow(selected_stocks)) {
print(selected_stocks[i,2])
}
selected_stocks[1, `Company identifier`]
selected_stocks[1,]
selected_stocks[1,]$`Company identifier`
test_df %>% filter(permno == 33452) %>% summarise(mean_vol = mean(vol))
test_df %>% filter(permno == 33452)
mean_volumne <- test_df %>%
filter(permno == 33452 ) %>%
summarise(mean_volumne = mean(vol))
mean_volumne
mean_volumne$mean_volumne
selected_stock_company_info <- function(selected_stocks, test_df,  n) {
company_info <- tibble()
for (i in 1:nrow(selected_stocks)) {
mean_volume <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_volume = mean(vol))
mean_cash <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_cash = mean(chq))
mean_operating_income <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_operating_income = mean(oiadpq))
company_info %<>% bind_rows(
tibble("Company name" = selected_stocks[i, ]$`Company name`,
"Mean volume" = mean_volume$mean_volume)
)
}
return (company_info)
}
selected_stock_company_info(selected_stocks, test_df, 10)
selected_stock_company_info <- function(selected_stocks, test_df,  n) {
selected_stocks <- selected_stocks %>% head(n)
company_info <- tibble()
for (i in 1:nrow(selected_stocks)) {
mean_volume <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_volume = mean(vol))
mean_cash <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_cash = mean(chq))
mean_operating_income <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_operating_income = mean(oiadpq))
company_info %<>% bind_rows(
tibble("Company name" = selected_stocks[i, ]$`Company name`,
"Mean volume" = mean_volume$mean_volume)
)
}
return (company_info)
}
selected_stock_company_info(selected_stocks, test_df, 10)
selected_stocks
test_df %>% filter(permno == 17778       ) %>% tibble::view()
selected_stock_company_info <- function(selected_stocks, test_df,  n) {
selected_stocks <- selected_stocks %>% head(n)
company_info <- tibble()
for (i in 1:nrow(selected_stocks)) {
mean_volume <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_volume = mean(vol))
mean_cash <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_cash = mean(chq))
mean_operating_income <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_operating_income = mean(oiadpq))
company_info %<>% bind_rows(
tibble("Company name" = selected_stocks[i, ]$`Company name`,
"Mean volume" = mean_volume$mean_volume,
"Mean cash" = mean_cash$mean_cash,
"Mean operating income" = mean_operating_income$mean_operating_income )
)
}
return (company_info)
}
selected_stock_company_info(selected_stocks, test_df, 10)
test_df$retx %>% mean()
selected_stock_company_info <- function(selected_stocks, test_df,  n) {
selected_stocks <- selected_stocks %>% head(n)
company_info <- tibble()
for (i in 1:nrow(selected_stocks)) {
mean_marketcap <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_marketcap = mean(marketcap))
mean_volume <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_volume = mean(vol))
mean_cash <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_cash = mean(chq))
mean_operating_income <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_operating_income = mean(oiadpq))
company_info %<>% bind_rows(
tibble("Company name" = selected_stocks[i, ]$`Company name`,
"Mean market cap" = mean_marketcap$mean_marketcap,
"Mean volume" = mean_volume$mean_volume,
"Mean cash" = mean_cash$mean_cash,
"Mean operating income" = mean_operating_income$mean_operating_income )
)
}
return (company_info)
}
selected_stock_company_info(selected_stocks, test_df, 10)
summary(gbm)
selected_stock_company_info(selected_stocks, test_df, 10) %>%
mutate(Number = seq(1,10)) %>%
map_df( stringr::str_to_title) %>%
kable(caption = "10 stocks of highest predictability",
digits  = 10)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman")
# Printing the most predictable stocks
selected_stock_company_info(selected_stocks, test_df, 10) %>%
map_df( stringr::str_to_title) %>%
kable(caption = "10 stocks of highest predictability",
digits  = 2)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman")
selected_stock_company_info <- function(selected_stocks, test_df,  n) {
selected_stocks <- selected_stocks %>% head(n)
company_info <- tibble()
for (i in 1:nrow(selected_stocks)) {
mean_marketcap <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_marketcap = mean(marketcap))
mean_volume <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_volume = mean(vol))
mean_cash <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_cash = mean(chq))
mean_operating_income <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_operating_income = mean(oiadpq))
company_info %<>% bind_rows(
tibble("Company name" = stringr::str_to_title(selected_stocks[i, ]$`Company name`),
"Mean market cap" = mean_marketcap$mean_marketcap,
"Mean volume" = mean_volume$mean_volume,
"Mean cash" = mean_cash$mean_cash,
"Mean operating income" = mean_operating_income$mean_operating_income )
)
}
return (company_info)
}
selected_stock_company_info(selected_stocks, test_df, 10) %>%
kable(caption = "10 stocks of highest predictability",
digits  = 2)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman")
mean_marketcap <- test_df %>%
summarise(mean_marketcap = mean(marketcap))
mean_volume <- test_df %>%
summarise(mean_volume = mean(vol))
mean_cash <- test_df %>%
summarise(mean_cash = mean(chq))
mean_operating_income <- test_df %>%
summarise(mean_operating_income = mean(oiadpq))
all_companies_summary <-
tibble("Mean market cap" = mean_marketcap$mean_marketcap,
"Mean volume" = mean_volume$mean_volume,
"Mean cash" = mean_cash$mean_cash,
"Mean operating income" = mean_operating_income$mean_operating_income )
all_companies_summary
rep(0, 2)
postResample(rep(0, nrow(test_df), test_df$retx)
postResample(rep(0, nrow(test_df)), test_df$retx)
postResample()
caret::postResample(rep(0, nrow(test_df)), test_df$retx)
model_evaluation %>%
arrange(`Test MAE`) %>%
mutate("Model name" = c("Neural Net 10 neurons", "Bayesian Ridge Regression", "Neural Net 5 neurons", "Generalized Additive Models", "K-Nearest Neighbors")) %>%
kable(caption = "Performance metrics of tested models",
digits  = 4) %>%
kable_classic(full_width = F,
html_font  = "Times New Roman")
benchmark_0_preds <- postResample(rep(0, nrow(test_df)), test_df$retx)
benchmark_0_results <- postResample(rep(0, nrow(test_df)), test_df$retx)
benchmark_0_results
tibble("Test MAE" = benchmark_0_results[[3]],
"Model" = "0 return prediction") %>%
kable(caption = "Performance of 0-prediction model",
digits  = 4) %>%
kable_classic(full_width = F,
html_font  = "Times New Roman")
tibble("Test MAE" = benchmark_0_results[[3]]) %>%
kable(caption = "Performance of 0-prediction model",
digits  = 4) %>%
kable_classic(full_width = F,
html_font  = "Times New Roman")
neural_preds <- predict(multi_hidden_layer_model, test_df)
neural_preds
all_companies_summary %>%
kable(caption = "Company mean metrics of all companies in test set",
digits  = 2)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman") %
all_companies_summary <-
tibble("Mean market cap" = mean_marketcap$mean_marketcap,
"Mean volume" = mean_volume$mean_volume,
"Mean cash" = mean_cash$mean_cash,
"Mean operating income" = mean_operating_income$mean_operating_income )
all_companies_summary
all_companies_summary %>%
kable(caption = "Company mean metrics of all companies in test set",
digits  = 2)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman")
selected_stock_company_info(selected_stocks, test_df, 10) %>%
kable(caption = "10 stocks of highest predictability",
digits  = 2)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman") %>%
save_kable("images/predictable_stocks.png",
zoom = 1.5,
density = 1900)
all_companies_summary %>%
kable(caption = "Company mean metrics of all companies in test set",
digits  = 2)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman") %>%
save_kable("images/all_company_summary.png",
zoom = 1.5,
density = 1900)
benchmark_0_results <- postResample(rep(0, nrow(test_df)), test_df$retx)
tibble("Test MAE" = benchmark_0_results[[3]],
"Model" = "0 return prediction") %>%
kable(caption = "Performance of 0-prediction model",
digits  = 4) %>%
kable_classic(full_width = F,
html_font  = "Times New Roman")
tibble("Test MAE" = benchmark_0_results[[3]],
"Model" = "0 return prediction") %>%
kable(caption = "Performance of 0-prediction model",
digits  = 4) %>%
kable_classic(full_width = F,
html_font  = "Times New Roman") %>%
save_kable("images/0_return_prediction.png",
zoom = 1.5,
density = 1900)
selected_stocks
merged %>% filter(permno == 17778 )
merged %>% filter(permno == 17778 )       %>% tibble::view()
test_df %>% filter(permno == 17778 )       %>% tibble::view()
select_stocks_always_0 <- function(test_df) {
#' @description:         Function that selects stocks based on predictability
#'                       with their performance metrics
#'
#' @param test_df        Passing a test data frame
#' @return               Companies with highest predictability
companies <- test_df$permno %>% unique()
#test_df  %<>% left_join(company_names_df, by = "permno") # merge with company names
company_predictability <- tibble()
for (company in companies) {
company_data <- test_df %>%
filter(permno == company)
company_predictions <- predict(rep(0, nrow(company_data)), company_data)
company_performance_metrics <- postResample(pred = company_predictions,
obs = test_df$retx)
company_predictability %<>% bind_rows(
tibble("Company name"       = get_company_name(company_data$permno[1]),
"Company identifier" = company_data$permno[1],
"Test RMSE"          = company_performance_metrics[[1]],
"Test MAE"           = company_performance_metrics[[3]])
)
}
return (company_predictability)
}
always_0_stocks <- select_stocks_always_0(test_df)
select_stocks_always_0 <- function(test_df) {
#' @description:         Function that selects stocks based on predictability
#'                       with their performance metrics
#'
#' @param test_df        Passing a test data frame
#' @return               Companies with highest predictability
companies <- test_df$permno %>% unique()
#test_df  %<>% left_join(company_names_df, by = "permno") # merge with company names
company_predictability <- tibble()
for (company in companies) {
company_data <- test_df %>%
filter(permno == company)
company_predictions <- predict(rep(0, nrow(company_data)), company_data)
company_performance_metrics <- postResample(pred = rep(0, nrow(company_data)),
obs = test_df$retx)
company_predictability %<>% bind_rows(
tibble("Company name"       = get_company_name(company_data$permno[1]),
"Company identifier" = company_data$permno[1],
"Test RMSE"          = company_performance_metrics[[1]],
"Test MAE"           = company_performance_metrics[[3]])
)
}
return (company_predictability)
}
always_0_stocks <- select_stocks_always_0(test_df)
select_stocks <- function(test_df, selected_model) {
#' @description:         Function that selects stocks based on predictability
#'                       with their performance metrics
#'
#' @param test_df        Passing a test data frame
#' @param selected_model Passing a selected model
#' @return               Companies with highest predictability
companies <- test_df$permno %>% unique()
#test_df  %<>% left_join(company_names_df, by = "permno") # merge with company names
company_predictability <- tibble()
for (company in companies) {
company_data <- test_df %>%
filter(permno == company)
company_predictions <- predict(selected_model, company_data)
company_performance_metrics <- postResample(pred = company_predictions,
obs = company_data$retx)
company_predictability %<>% bind_rows(
tibble("Company name"       = get_company_name(company_data$permno[1]),
"Company identifier" = company_data$permno[1],
"Test RMSE"          = company_performance_metrics[[1]],
"Test MAE"           = company_performance_metrics[[3]])
)
}
return (company_predictability)
}
select_stocks <- function(test_df, selected_model) {
#' @description:         Function that selects stocks based on predictability
#'                       with their performance metrics
#'
#' @param test_df        Passing a test data frame
#' @param selected_model Passing a selected model
#' @return               Companies with highest predictability
companies <- test_df$permno %>% unique()
#test_df  %<>% left_join(company_names_df, by = "permno") # merge with company names
company_predictability <- tibble()
for (company in companies) {
company_data <- test_df %>%
filter(permno == company)
company_predictions <- predict(selected_model, company_data)
company_performance_metrics <- postResample(pred = company_predictions,
obs = company_data$retx)
company_predictability %<>% bind_rows(
tibble("Company name"       = get_company_name(company_data$permno[1]),
"Company identifier" = company_data$permno[1],
"Test RMSE"          = company_performance_metrics[[1]],
"Test MAE"           = company_performance_metrics[[3]])
)
}
return (company_predictability)
}
selected_stocks <- select_stocks(test_df, selected_model) %>%  arrange(`Test MAE`)
selected_stocks
always_0_stocks <- select_stocks_always_0(test_df)
select_stocks_always_0 <- function(test_df) {
#' @description:         Function that selects stocks based on predictability
#'                       with their performance metrics
#'
#' @param test_df        Passing a test data frame
#' @return               Companies with highest predictability
companies <- test_df$permno %>% unique()
#test_df  %<>% left_join(company_names_df, by = "permno") # merge with company names
company_predictability <- tibble()
for (company in companies) {
company_data <- test_df %>%
filter(permno == company)
company_performance_metrics <- postResample(pred = rep(0, nrow(company_data)),
obs = test_df$retx)
company_predictability %<>% bind_rows(
tibble("Company name"       = get_company_name(company_data$permno[1]),
"Company identifier" = company_data$permno[1],
"Test RMSE"          = company_performance_metrics[[1]],
"Test MAE"           = company_performance_metrics[[3]])
)
}
return (company_predictability)
}
always_0_stocks <- select_stocks_always_0(test_df)
always_0_stocks
select_stocks_always_0 <- function(test_df) {
#' @description:         Function that selects stocks based on predictability
#'                       with their performance metrics
#'
#' @param test_df        Passing a test data frame
#' @return               Companies with highest predictability
companies <- test_df$permno %>% unique()
company_predictability <- tibble()
for (company in companies) {
company_data <- test_df %>%
filter(permno == company)
company_performance_metrics <- postResample(pred = rep(0, nrow(company_data)),
obs = company_data$retx)
company_predictability %<>% bind_rows(
tibble("Company name"       = get_company_name(company_data$permno[1]),
"Company identifier" = company_data$permno[1],
"Test RMSE"          = company_performance_metrics[[1]],
"Test MAE"           = company_performance_metrics[[3]])
)
}
return (company_predictability)
}
always_0_stocks <- select_stocks_always_0(test_df)
always_0_stocks
always_0_stocks %>% arrange(`Test MAE`)
selected_stocks  %>% arrange(`Test MAE`)
View(selected_stocks)
View(selected_stocks)
View(always_0_stocks)
benchmark_0_results <- postResample(rep(0, nrow(test_df)), test_df$retx)
tibble("Test MAE" = benchmark_0_results[[3]],
"Model" = "0 return prediction") %>%
kable(caption = "Performance of 0-prediction model",
digits  = 4) %>%
kable_classic(full_width = F,
html_font  = "Times New Roman")
select_stocks <- function(test_df, selected_model) {
#' @description:         Function that selects stocks based on predictability
#'                       with their performance metrics
#'
#' @param test_df        Passing a test data frame
#' @param selected_model Passing a selected model
#' @return               Companies with highest predictability
companies <- test_df$permno %>% unique()
company_predictability <- tibble()
for (company in companies) {
company_data <- test_df %>%
filter(permno == company)
company_predictions <- predict(selected_model, company_data)
company_performance_metrics <- postResample(pred = company_predictions,
obs = company_data$retx)
company_predictability %<>% bind_rows(
tibble("Company name"       = get_company_name(company_data$permno[1]),
"Company identifier" = company_data$permno[1],
"Test RMSE"          = company_performance_metrics[[1]],
"Test MAE"           = company_performance_metrics[[3]])
)
}
return (company_predictability)
}
select_stocks_always_0 <- function(test_df) {
#' @description:         Function that selects stocks based on predictability
#'                       with their performance metrics
#'
#' @param test_df        Passing a test data frame
#' @return               Companies with highest predictability
companies <- test_df$permno %>% unique()
company_predictability <- tibble()
for (company in companies) {
company_data <- test_df %>%
filter(permno == company)
company_performance_metrics <- postResample(pred = rep(0, nrow(company_data)),
obs = company_data$retx)
company_predictability %<>% bind_rows(
tibble("Company name"       = get_company_name(company_data$permno[1]),
"Company identifier" = company_data$permno[1],
"Test RMSE"          = company_performance_metrics[[1]],
"Test MAE"           = company_performance_metrics[[3]])
)
}
return (company_predictability)
}
selected_stock_company_info(selected_stocks, test_df, 10) %>%
kable(caption = "10 stocks of highest predictability",
digits  = 2)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman")
selected_stock_company_info(selected_stocks, test_df, 10) %>%
kable(caption = "10 stocks of highest predictability",
digits  = 2)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman") %>%
save_kable("images/predictable_stocks.png",
zoom = 1.5,
density = 1900)
benchmark_0_results <- postResample(rep(0, nrow(test_df)), test_df$retx)
tibble("Test MAE" = benchmark_0_results[[3]],
"Model" = "0 return prediction") %>%
kable(caption = "Performance of 0-prediction model",
digits  = 4) %>%
kable_classic(full_width = F,
html_font  = "Times New Roman") %>%
save_kable("images/0_return_prediction.png",
zoom = 1.5,
density = 1900)
tibble("Test MAE" = benchmark_0_results[[3]],
"Model" = "0 return prediction") %>%
kable(caption = "Performance of 0-prediction model",
digits  = 4) %>%
kable_classic(full_width = F,
html_font  = "Times New Roman") %>%
save_kable("images/0_return_prediction.png",
zoom = 1.5,
density = 3000)
tibble("Test MAE" = benchmark_0_results[[3]],
"Model" = "0 return prediction") %>%
kable(caption = "Performance of 0-prediction model",
digits  = 4) %>%
kable_classic(full_width = F,
html_font  = "Times New Roman") %>%
save_kable("images/0_return_prediction.png",
zoom = 3,
density = 3000)
tibble("Test MAE" = benchmark_0_results[[3]],
"Model" = "0 return prediction") %>%
kable(caption = "Performance of 0-prediction model",
digits  = 4) %>%
kable_classic(full_width = F,
html_font  = "Times New Roman") %>%
save_kable("images/0_return_prediction.png",
zoom = 3,
density = 1500)
