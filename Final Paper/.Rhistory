naive_0_benchmark_rmse <- naive_0_benchmark_predictions$`Test RMSE` %>% mean()
model_performance %<>% bind_rows(
tibble(
"Model name"               = "Zero prediction naive model",
"RMSE top stocks"          = naive_0_benchmark_rmse,
"MAE top stocks"           = naive_0_benchmark_mae)
)
return (model_performance)
}
model_metrics_stock_level <- mean_metric_stock_level(30, test_df, stock_level_mae) %>% arrange(`MAE top stocks`)
model_metrics_stock_level
ensemble_metrics <- function(model_metrics) {
ensemble_metrics <- tibble()
for (model in model_metrics) {
stock_level_predictions <- model[[1]]
if (ensemble_metrics %>% nrow() == 0 ) ensemble_metrics <-  stock_level_predictions
else {
ensemble_metrics %<>% mutate(`Test MAE`  = `Test MAE` + stock_level_predictions$`Test MAE`,
`Test RMSE` = `Test RMSE` + stock_level_predictions$`Test RMSE`)
}
}
# divide by number of models
ensemble_metrics %<>%
mutate(`Test MAE` = `Test MAE`/length(model_metrics),
`Test RMSE` = `Test RMSE`/length(model_metrics))
return(ensemble_metrics)
}
ensemble_metrics(stock_level_mae)
least_predictable_stocks_ensemble <- ensemble_metrics(stock_level_mae) %>% arrange(`Test MAE`) %>% tail(20)
most_predictable_stocks_ensemble <- ensemble_metrics(stock_level_mae) %>% arrange(`Test MAE`) %>% head(20)
most_predictable_stocks_ensemble
least_predictable_stocks_ensemble
rm(predictions_1_nn_model)
rm(predictions_2_nn_model)
predictions_3_nn_model
least_predictable_stocks_ensemble$`Test MAE` %>% mean()
most_predictable_stocks_ensemble$`Test MAE` %>% mean()
tibble("MAE" = c(most_predictable_stocks_ensemble$`Test MAE` %>% mean(), least_predictable_stocks_ensemble$`Test MAE` %>% mean() ),
"RMSE" = c(most_predictable_stocks_ensemble$`Test RMSE` %>% mean(), least_predictable_stocks_ensemble$`Test RMSE` %>% mean() ))
least_predictable_stocks_ensemble <- ensemble_metrics(stock_level_mae) %>% arrange(`Test MAE`) %>% tail(50)
most_predictable_stocks_ensemble <- ensemble_metrics(stock_level_mae) %>% arrange(`Test MAE`) %>% head(50)
tibble("MAE" = c(most_predictable_stocks_ensemble$`Test MAE` %>% mean(), least_predictable_stocks_ensemble$`Test MAE` %>% mean() ),
"RMSE" = c(most_predictable_stocks_ensemble$`Test RMSE` %>% mean(), least_predictable_stocks_ensemble$`Test RMSE` %>% mean() ))
tibble("RMSE" = c(most_predictable_stocks_ensemble$`Test RMSE` %>% mean(), least_predictable_stocks_ensemble$`Test RMSE` %>% mean()),
"MAE" = c(most_predictable_stocks_ensemble$`Test MAE` %>% mean(), least_predictable_stocks_ensemble$`Test MAE` %>% mean()),
"Stocks" = c("Mean perfomance of 50 most predictable stocks", "Mean perfomance of 50 least predictable stocks"))
tibble( "Stocks" = c("Mean perfomance of 50 most predictable stocks", "Mean perfomance of 50 least predictable stocks"),
"RMSE" = c(most_predictable_stocks_ensemble$`Test RMSE` %>% mean(), least_predictable_stocks_ensemble$`Test RMSE` %>% mean()),
"MAE" = c(most_predictable_stocks_ensemble$`Test MAE` %>% mean(), least_predictable_stocks_ensemble$`Test MAE` %>% mean()))
tibble( "Stocks" = c("Mean perfomance of 50 most predictable stocks", "Mean perfomance of 50 least predictable stocks"),
"RMSE" = c(most_predictable_stocks_ensemble$`Test RMSE` %>% mean(), least_predictable_stocks_ensemble$`Test RMSE` %>% mean()),
"MAE" = c(most_predictable_stocks_ensemble$`Test MAE` %>% mean(), least_predictable_stocks_ensemble$`Test MAE` %>% mean())) %>%
kable(caption = "Ensemble model performance on 50 most and least predictable stocks",
digits  = 4)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman")
############# Ensemble performance metrics  ########
least_predictable_stocks_ensemble <- ensemble_metrics(stock_level_mae) %>% arrange(`Test MAE`) %>% tail(50)
most_predictable_stocks_ensemble <- ensemble_metrics(stock_level_mae) %>% arrange(`Test MAE`) %>% head(50)
#Ensemble table of most and least predictable stocks
tibble( "Stocks" = c("Mean perfomance of 50 most predictable stocks", "Mean perfomance of 50 least predictable stocks"),
"RMSE" = c(most_predictable_stocks_ensemble$`Test RMSE` %>% mean(), least_predictable_stocks_ensemble$`Test RMSE` %>% mean()),
"MAE" = c(most_predictable_stocks_ensemble$`Test MAE` %>% mean(), least_predictable_stocks_ensemble$`Test MAE` %>% mean())) %>%
kable(caption = "Ensemble model performance on 50 most and least predictable stocks",
digits  = 4)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman") %>%
save_kable("images/differences_in_stock_predictability.png",
zoom = 3,
density = 1900)
two_layer_nn_predictable_stocks
test_df %>% filter(permno == two_layer_nn_predictable_stocks$`Company identifier`)
test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`)
test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
sd()
test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx)
test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
mutate_all(sd)
sd(test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) )
sd(c(1,2,3))
sd(c(1,2,0.5))
test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
mutate_all(sd) %>%
slice(1)
predictable_stocks_sd <- test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
mutate_all(sd) %>%
slice(1)
predictable_stocks_sd
all_companies <- test_df  %>%
dplyr::select(retx) %>%
mutate_all(sd) %>%
slice(1)
all_companies
predictable_stocks_sd$retx
predictable_stocks_sd$retx[[1]]
selected_stock_company_info(two_layer_nn_predictable_stocks, test_df ) %>%
summarise("Mean market cap" = mean(`Mean market cap`),
"Mean volume" = mean(`Mean volume`),
"Mean cash" = mean(`Mean cash`),
"Mean operating income" = mean(`Mean operating income`),
"Standard devation of returns" = predictable_stocks_sd$retx ) %>%
kable(caption = "Mean financial indicators of 30 most predictable stocks",
digits  = 0)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman"
)
predictable_stocks_sd <- test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
mutate_all(sd) %>%
mutate_all(toString(sd))
toString(0.5)
predictable_stocks_sd <- test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
mutate_all(sd) %>%
mutate_all(toString(retx))
predictable_stocks_sd <- test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
mutate_all(sd)
predictable_stocks_sd
test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
mutate_all(sd) %>%
slice(1)
predictable_stocks_sd <- test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
mutate_all(sd) %>%
slice(1) %>%
mutate_all(toString(retx))
predictable_stocks_sd <- test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
mutate_all(sd) %>%
slice(1) %>%
mutate_all(toString)
predictable_stocks_sd
paste0(formatC(0.0513428320094845 * 100, format = format, digits = digits, ...), "%"
paste0(formatC(0.0513428320094845 * 100, format = format, digits = digits, ...)
paste0(formatC(0.0513428320094845 * 100, format = format, digits = digits, ...)
paste0(formatC(0.0513428320094845 * 100, format = format, digits = digits, ...))
paste0(formatC(0.0513428320094845 * 100, format = format, digits = digits, ...))
paste0(formatC(0.5 * 100, format = format, digits = digits, ...), "%")
library(scales)
scales::percent(0.5)
predictable_stocks_sd <- test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
mutate_all(sd) %>%
slice(1) %>%
mutate_all(scales::percent)
predictable_stocks_sd
help(percent)
predictable_stocks_sd <- test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
mutate_all(sd) %>%
slice(1) %>%
mutate_all(scales::percent, accuracy = 0.001)
predictable_stocks_sd
selected_stock_company_info(two_layer_nn_predictable_stocks, test_df ) %>%
summarise("Mean market cap" = mean(`Mean market cap`),
"Mean volume" = mean(`Mean volume`),
"Mean cash" = mean(`Mean cash`),
"Mean operating income" = mean(`Mean operating income`),
"Standard devation of returns" = predictable_stocks_sd$retx ) %>%
kable(caption = "Mean financial indicators of 30 most predictable stocks",
digits  = 0)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman")
all_company_metrics <- function(selected_test_df) {
#' Returns mean financial indicators of all stocks in input test dataset
mean_marketcap <- selected_test_df %>%
summarise(mean_marketcap = mean(marketcap))
mean_volume <- selected_test_df %>%
summarise(mean_volume = mean(vol))
mean_cash <- selected_test_df %>%
summarise(mean_cash = mean(chq))
mean_operating_income <- selected_test_df %>%
summarise(mean_operating_income = mean(oiadpq))
all_companies_sd <- test_df  %>%
dplyr::select(retx) %>%
mutate_all(sd) %>%
slice(1) %>%
mutate_all(scales::percent, accuracy = 0.001)
all_companies_summary <-
tibble("Mean market cap" = mean_marketcap$mean_marketcap,
"Mean volume" = mean_volume$mean_volume,
"Mean cash" = mean_cash$mean_cash,
"Mean operating income" = mean_operating_income$mean_operating_income,
"Standard deviation of returns" = all_companies_sd$retx)
all_companies_summary %>%
kable(caption = "Mean financial indicators of all test companies",
digits  = 0)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman") %>%
save_kable("images/all_company_summary.png",
zoom = 3,
density = 1900)
}
selected_stock_company_info(two_layer_nn_predictable_stocks, test_df ) %>%
kable(caption = "Financial indicators of 30 most predictable stocks",
digits  = 0)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman")
selected_stock_company_info(two_layer_nn_predictable_stocks, test_df )
selected_stock_company_info <- function(selected_stocks, test_df) {
#' @description:    Makes a summary of feature means of selcted stocks (companies)
#'
#' @sele
#' @test_df: orginal test set from which the selcted companies are drawn
#' @n: number of included companies
selected_stocks <- selected_stocks
company_info <- tibble()
for (i in 1:nrow(selected_stocks)) {
mean_marketcap <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_marketcap = mean(marketcap))
mean_volume <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_volume = mean(vol))
mean_cash <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_cash = mean(chq))
mean_operating_income <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_operating_income = mean(oiadpq))
predictable_stocks_sd <- test_df %>% filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
mutate_all(sd) %>%
slice(1) %>%
mutate_all(scales::percent, accuracy = 0.001)
company_info %<>% bind_rows(
tibble("Company name" = stringr::str_to_title(selected_stocks[i, ]$`Company name`),
"Mean market cap" = mean_marketcap$mean_marketcap,
"Mean volume" = mean_volume$mean_volume,
"Mean cash" = mean_cash$mean_cash,
"Mean operating income" = mean_operating_income$mean_operating_income,
"Standard deviation of returns" = predictable_stocks_sd$retx)
)
}
return (company_info)
}
selected_stock_company_info(two_layer_nn_predictable_stocks, test_df )
selected_stock_company_info <- function(selected_stocks, test_df) {
#' @description:    Makes a summary of feature means of selcted stocks (companies)
#'
#' @sele
#' @test_df: orginal test set from which the selcted companies are drawn
#' @n: number of included companies
selected_stocks <- selected_stocks
company_info <- tibble()
for (i in 1:nrow(selected_stocks)) {
mean_marketcap <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_marketcap = mean(marketcap))
mean_volume <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_volume = mean(vol))
mean_cash <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_cash = mean(chq))
mean_operating_income <- test_df %>%
filter(permno == selected_stocks[i, ]$`Company identifier`) %>%
summarise(mean_operating_income = mean(oiadpq))
company_info %<>% bind_rows(
tibble("Company name" = stringr::str_to_title(selected_stocks[i, ]$`Company name`),
"Mean market cap" = mean_marketcap$mean_marketcap,
"Mean volume" = mean_volume$mean_volume,
"Mean cash" = mean_cash$mean_cash,
"Mean operating income" = mean_operating_income$mean_operating_income )
)
}
return (company_info)
}
model_metrics_stock_level %>%
kable(caption = "Model performance on 30 most predictable stocks",
digits  = 4)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman")
two_layer_nn_predictable_stocks %>%
mutate("Company name" = sapply(`Company name`, stringr::str_to_title)) %>%
kable(caption = "30 stocks of highest predictability",
digits  = 5)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman")
predictable_stocks_sd <- test_df  %>%
dplyr::filter(permno %in% two_layer_nn_predictable_stocks$`Company identifier`) %>%
dplyr::select(retx) %>%
mutate_all(sd) %>%
slice(1) %>%
mutate_all(scales::percent, accuracy = 0.001)
predictable_stocks_sd
selected_stock_company_info(two_layer_nn_predictable_stocks, test_df ) %>%
summarise("Mean market cap" = mean(`Mean market cap`),
"Mean volume" = mean(`Mean volume`),
"Mean cash" = mean(`Mean cash`),
"Mean operating income" = mean(`Mean operating income`),
"Standard devation of returns" = predictable_stocks_sd$retx ) %>%
kable(caption = "Mean financial indicators of 30 most predictable stocks",
digits  = 0)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman")
selected_stock_company_info(two_layer_nn_predictable_stocks, test_df ) %>%
summarise("Mean market cap" = mean(`Mean market cap`),
"Mean volume" = mean(`Mean volume`),
"Mean cash" = mean(`Mean cash`),
"Mean operating income" = mean(`Mean operating income`),
"Standard devation of returns" = predictable_stocks_sd$retx ) %>%
kable(caption = "Mean financial indicators of 30 most predictable stocks",
digits  = 0)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman") %>%
save_kable("images/predictable_stocks_characteristics_mean.png",
zoom = 3,
density = 1900)
## Average indicator values all test stocks #####
all_company_metrics(test_df) # Call on function that calculates average financial indicators for all companies in test set
evaluation_data$date
evaluation_data$date %>% plot()
evaluation_data$date %>% plot()
evaluation_data$date %>% count()
evaluation_data %>% group_by(date) %>% summarise(date_count = count())
evaluation_data %>% group_by(date) %>% summarise(date_count = n())
evaluation_data %>% group_by(date) %>% summarise(date_count = n()) %>% tibble::view()
two_layer_nn_predictable_stocks %>% slice(2:6)
two_layer_nn_predictable_stocks
two_layer_nn_predictable_stocks %>% slice(2:) %>% head(5)
plot_monthly_returns_companies(stock_predictions,  two_layer_nn_predictable_stocks %>% slice(-1) %>% head(5),
"Predicted vs Observed Returns of Five Most Predictable Stocks in 2018-2019" )
plot_monthly_returns_companies(stock_predictions,  two_layer_nn_predictable_stocks %>% slice(-1) %>% head(5),
"Predicted vs Observed Returns of Five Most Predictable Stocks in 2018-2019" ,1)
stock_predictions
stock_predictions$permno %>% unique() %>% length()
evaluation_mae <- postResample(stock_predictions$predicted_returns, stock_predictions$retx)
evaluaton_naive_benchmark <- postResample(rep(0, nrow(stock_predictions)), stock_predictions$retx)
## Evaluation period table
tibble("Model" = c("Two hidden-layer neural network", "Naive 0-benchmark"),
"Evaluation RMSE" = c(evaluation_mae[[1]], evaluaton_naive_benchmark[[1]]),
"Evaluaton MAE" =  c(evaluation_mae[[3]], evaluaton_naive_benchmark[[3]])) %>%
kable(caption = "Performance Metrics in Evaluation Period of Two Hidden-Layer Neural Network",
digits  = 4) %>%
kable_classic(full_width = F,
html_font  = "Times New Roman")  %>%
save_kable("images/evaluation_period_mae.png",
zoom = 3,
density = 1900)
test_df$retx %>% plot()
test_df %>% dplyr::filter(retx > 0.003)
test_df %>% dplyr::filter(retx > 0.003) %>% count()
test_df %>% count()
test_df %>% dplyr::filter(retx > 0.03) %>% count()
test_df %>% dplyr::filter(retx > 0.05) %>% count()
test_df %>% dplyr::filter(retx > 0.07) %>% count()
plot_monthly_returns_companies(stock_predictions,  two_layer_nn_predictable_stocks %>% slice(-1) %>% head(5),
"Predicted vs Observed Returns of Five Most Predictable Stocks in 2018-2019" ,1)
plot_monthly_returns_companies(stock_predictions,  two_layer_nn_predictable_stocks %>% slice(-1) %>% head(5),
"Predicted vs Observed Returns of Five Most Predictable Stocks in 2018-2019" ,1)
ggsave(filename = "images/evalution_plot_5_most_predictable_stocks.png", scale = 2, dpi = 500, width = 5, height = 5)
nrow(selection_data )
nrow(selection_data ) + evaluation_data %>% nrow()
least_predictable_stocks_ensemble <- ensemble_metrics(stock_level_mae) %>% arrange(`Test MAE`) %>% tail(30)
most_predictable_stocks_ensemble <- ensemble_metrics(stock_level_mae) %>% arrange(`Test MAE`) %>% head(30)
#Ensemble table of most and least predictable stocks
tibble( "Stocks" = c("Mean perfomance of 50 most predictable stocks", "Mean perfomance of 50 least predictable stocks"),
"RMSE" = c(most_predictable_stocks_ensemble$`Test RMSE` %>% mean(), least_predictable_stocks_ensemble$`Test RMSE` %>% mean()),
"MAE" = c(most_predictable_stocks_ensemble$`Test MAE` %>% mean(), least_predictable_stocks_ensemble$`Test MAE` %>% mean())) %>%
kable(caption = "Variation in predictability: Ensemble model predictions",
digits  = 4)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman")
least_predictable_stocks_ensemble <- ensemble_metrics(stock_level_mae) %>% arrange(`Test MAE`) %>% tail(50)
most_predictable_stocks_ensemble <- ensemble_metrics(stock_level_mae) %>% arrange(`Test MAE`) %>% head(50)
#Ensemble table of most and least predictable stocks
tibble( "Stocks" = c("Mean perfomance of 50 most predictable stocks", "Mean perfomance of 50 least predictable stocks"),
"RMSE" = c(most_predictable_stocks_ensemble$`Test RMSE` %>% mean(), least_predictable_stocks_ensemble$`Test RMSE` %>% mean()),
"MAE" = c(most_predictable_stocks_ensemble$`Test MAE` %>% mean(), least_predictable_stocks_ensemble$`Test MAE` %>% mean())) %>%
kable(caption = "Variation in stock predictability: Ensemble model predictions",
digits  = 4)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman") %>%
save_kable("images/differences_in_stock_predictability.png",
zoom = 3,
density = 1900)
tibble( "Stocks" = c("Mean perfomance of 50 most predictable stocks", "Mean perfomance of 50 least predictable stocks"),
"RMSE" = c(most_predictable_stocks_ensemble$`Test RMSE` %>% mean(), least_predictable_stocks_ensemble$`Test RMSE` %>% mean()),
"MAE" = c(most_predictable_stocks_ensemble$`Test MAE` %>% mean(), least_predictable_stocks_ensemble$`Test MAE` %>% mean())) %>%
kable(caption = "Variation in Stock Predictability: Ensemble model predictions",
digits  = 4)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman") %>%
save_kable("images/differences_in_stock_predictability.png",
zoom = 3,
density = 1900)
tibble( "Stocks" = c("Mean perfomance of 50 most predictable stocks", "Mean perfomance of 50 least predictable stocks"),
"RMSE" = c(most_predictable_stocks_ensemble$`Test RMSE` %>% mean(), least_predictable_stocks_ensemble$`Test RMSE` %>% mean()),
"MAE" = c(most_predictable_stocks_ensemble$`Test MAE` %>% mean(), least_predictable_stocks_ensemble$`Test MAE` %>% mean())) %>%
kable(caption = "Variation in Stock Predictability: Ensemble Model Predictions",
digits  = 4)  %>%
kable_classic(full_width = F,
html_font = "Times New Roman") %>%
save_kable("images/differences_in_stock_predictability.png",
zoom = 3,
density = 1900)
varImp(gbm_model)
varImp(gbm_model) %>% as_tibble()
varImp(gbm_model) %>% as.data.frame()
most_important_features <- varImp(gbm_model)
most_important_features$importance
most_important_features$importance %>% as.data.frame()
most_important_features$importance %>% as.data.frame() %>%
head(20) %>%
ggplot(aes(x = reorder(features, - score$Overall), y =  score$Overall)) +
geom_bar(stat = "identity") +
theme_bw() +
theme(legend.position = "bottom") +
labs(x = "Features", y = "Variable importance", title ="Variable importance GBM") +
scale_colour_manual(values=c("orange"))
most_important_features$importance %>% as.data.frame()
most_important_features$importance %>% as.data.frame() %>% as_tibble()
test <-most_important_features$importance %>% as.data.frame() %>% as_tibble()
test$Overall
varImp(gbm)
varImp(gbm_model)
varImp(gbm_model)$score
feature_names <- most_important_features %>% rowname()
feature_names <- most_important_features %>% rownames()
feature_names
most_important_features
row.names(most_important_features)
rownames(varImp(gbm_model))
rownames(most_important_features %>% as.data.frame())
most_important_features
most_important_features %>% as.data.frame()
most_important_features$importance
most_important_features$importance %>% as.data.frame()
most_important_features <- varImp(gbm_model)$importance %>%
as.data.frame()
most_important_features
most_important_features <- varImp(gbm_model)$importance %>%
as.data.frame() %>%
arrange(Overall)
most_important_features
most_important_features <- varImp(gbm_model)$importance %>%
as.data.frame() %>%
arrange(desc(Overall))
most_important_features
feature_names <- most_important_features %>% rownames()
feature_names
tibble(variable = feature_names, score = most_important_features$Overall)
tibble(variable = feature_names, score = most_important_features$Overall) %>%
head(20) %>%
ggplot(aes(x = reorder(feature_names, - score), y =  score)) +
geom_bar(stat = "identity") +
theme_bw() +
theme(legend.position = "bottom") +
labs(x = "Features", y = "Variable importance", title ="Variable importance GBM") +
scale_colour_manual(values=c("orange"))
tibble(variable = feature_names, score = most_important_features$Overall)
tibble(variable = feature_names, score = most_important_features$Overall) %>%
head(20) %>%
ggplot(aes(x = reorder(variable, - score), y =  score)) +
geom_bar(stat = "identity") +
theme_bw() +
theme(legend.position = "bottom") +
labs(x = "Features", y = "Variable importance", title ="Variable importance GBM") +
scale_colour_manual(values=c("orange"))
### GBM variable importance
tibble(variable = feature_names, score = most_important_features$Overall) %>%
head(20) %>%
ggplot(aes(x = reorder(variable, - score), y =  score)) +
geom_bar(stat = "identity") +
theme_bw() +
theme(legend.position = "bottom") +
labs(x = "Features", y = "Variable importance", title ="Variable importance GBM") +
scale_colour_manual(values=c("orange"))
ggsave(filename = "images/variable_importance_gbm.png", scale = 2, dpi = 1500)
### GBM variable importance
tibble(variable = feature_names, score = most_important_features$Overall) %>%
head(20) %>%
ggplot(aes(x = reorder(variable, - score), y =  score)) +
geom_bar(stat = "identity") +
theme_bw() +
theme(legend.position = "bottom") +
labs(x = "Features", y = "Variable importance", title ="Variable importance GBM") +
scale_colour_manual(values=c("orange"))
ggsave(filename = "images/variable_importance_gbm.png", scale = 1, dpi = 1500)
load_models <- function() {
load(file = "models/models.Rdata") # Load knn, gbm, ridge regression
## Load NN models
load(file = "models/1_nn_layer_model_history.Rdata")
best_model_nn_1_layer_all <- list( load_model_hdf5("models/1_layer_nn_model.hdf5"), best_model_nn_1_layer_history)
load(file = "models/2_nn_layers_model_history.Rdata")
best_model_nn_2_layers_all <- list( load_model_hdf5("models/2_layers_nn_model.hdf5"), best_model_nn_2_layers_history)
load(file = "models/3_nn_layers_model_history.Rdata")
best_model_nn_3_layers_all <- list( load_model_hdf5("models/3_layers_nn_model.hdf5"), best_model_nn_3_layers_history)
load(file = "models/4_nn_layer_model_history.Rdata")
best_model_nn_4_layers_all <- list( load_model_hdf5("models/4_layers_nn_model.hdf5"), best_model_nn_4_layers_history)
}
load_models()
predictions_4_nn_model <- best_model_nn_4_layers_all[[1]] %>% predict(test_df %>% dplyr::select(-retx, -permno))
predictions_4_nn_model[ , 1]
postResample(predictions_4_nn_model[ , 1], test_df$retx)
predictions_2_nn_model <- best_model_nn_2_layers_all[[1]] %>% predict(test_df %>% dplyr::select(-retx, -permno))
predictions_2_nn_model[ , 1]
postResample(predictions_2_nn_model[ , 1], test_df$retx)
load_models()
## 2 NN
predictions_2_nn_model <- best_model_nn_2_layers_all[[1]] %>% predict(test_df %>% dplyr::select(-retx, -permno))
predictions_2_nn_model[ , 1]
postResample(predictions_2_nn_model[ , 1], test_df$retx)
