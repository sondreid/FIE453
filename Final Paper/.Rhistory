build_nn_model_3_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 100, activation = "relu") %>%
layer_dropout(0.3) %>%
#layer_batch_normalization() %>%
layer_dense(units = 100, activation = "relu") %>%
layer_dropout(0.3) %>%
#layer_batch_normalization() %>%
layer_dense(units = 50)
model <- keras_model(input, output)
return(model)
}
build_model <- function(selected_train_df, selected_spec, num_layers, batch_normalization, dropout_rate) {
if (num_layers == 1) {
output_model = build_nn_model_1_layer(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 3) {
output_model = build_nn_model_3_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 5) {
output_model = build_nn_model_5_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
return (output_model)
}
grid_search_nn_model_generaL_optimizer <- function(model_train_df, dropout_rates, num_layers,
epochs, batch_sizes, optimizer, patience_list,  verbose) {
selected_spec <- feature_spec(model_train_df, retx ~ . ) %>%
step_numeric_column(all_numeric(), -costat, normalizer_fn = scaler_standard()) %>% # Scale numeric features
step_categorical_column_with_vocabulary_list(costat) %>%  # non-numeric variables
fit()
best_MAE <- Inf
best_model <- NA
best_history <- NA
batch_normalizations <- list(T, F)
for (dropout_rate in dropout_rates) {
for (batch_normalization in batch_normalizations) {
for (batch_size in batch_sizes) {
for (patience in patience_list) {
selected_model = build_model(model_train_df, selected_spec, num_layers, batch_normalization, dropout_rate)
reduce_lr = callback_reduce_lr_on_plateau(monitor = "val_loss", patience = patience)
new_early_stop = callback_early_stopping(monitor = "val_loss", patience = patience + 10)
new_model = selected_model %>%
compile(
loss = "mse",
optimizer = optimizer,
metrics = list("mean_absolute_error"))
new_history = new_model %>%
fit(
x = model_train_df %>% dplyr::select(-retx),
y = model_train_df$retx,
epochs = epochs,
batch_size = batch_size,
validation_split = 0.2,
verbose = verbose,
callbacks = list(print_dot_callback, reduce_lr, new_early_stop) #Print simplified dots, and stop learning when validation improvements stalls
)
mae_list_length =  new_history$metrics$val_mean_absolute_error %>% length()
new_mae =  new_history$metrics$val_mean_absolute_error[[mae_list_length]]
print(paste("> MAE of new model", new_mae))
if (new_mae < best_MAE) {
best_history <- new_history
best_model <- new_model
best_MAE <- new_mae
print(paste(">New best model. MAE of new model", best_MAE))
print(paste(">Batch size", batch_size))
print(paste(">dropout_rate", dropout_rate))
print(paste("> Patience", patience))
print(paste(">Batch normalization", batch_normalization))
}
}
}
}
}
return (list(best_model, best_history))
}
best_model_nn_3_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0, 0.1, 0.3, 0.4),
num_layers = 3,
batch_sizes = list(500, 1000, 7000),
epochs = 200,
optimizer = sgd_opt,
patience_list = list(1, 2, 5, 20,25, 40, 50),
verbose = 0
)
sgd_opt = optimizer_sgd(learning_rate = 0.9)
best_model_nn_3_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0, 0.1, 0.3, 0.4),
num_layers = 3,
batch_sizes = list(500, 1000, 7000),
epochs = 200,
optimizer = sgd_opt,
patience_list = list(1, 2, 5, 20,25, 40, 50),
verbose = 0
)
print_dot_callback <- callback_lambda(
#' Simplified callback, showing dots instead of full loss/validation error plots
on_epoch_end = function(epoch, logs) {
if (epoch %% 80 == 0) cat("\n")
cat(".")
}
)
best_model_nn_3_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0, 0.1, 0.3, 0.4),
num_layers = 3,
batch_sizes = list(500, 1000, 7000),
epochs = 200,
optimizer = sgd_opt,
patience_list = list(1, 2, 5, 20,25, 40, 50),
verbose = 0
)
build_nn_model_2_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 100, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 50)
model <- keras_model(input, output)
return(model)
}
best_model_nn_2_layers_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0, 0.1, 0.3, 0.4),
num_layers = 2,
batch_sizes = list(500, 1000, 7000),
epochs = 200,
optimizer = sgd_opt,
patience_list = list(1, 2, 5, 20,25, 40, 50),
verbose = 0
)
predictions_1_nn_model <- best_model_nn_1_layer_test[[1]] %>% predict(test_df_reduced %>% dplyr::select(-retx, -permno))
predictions_1_nn_model[ , 1]
postResample(predictions_1_nn_model[ , 1], test_df_reduced$retx)
predictions_1_nn_model <- best_model_nn_1_layer_test[[1]] %>% predict(test_df_reduced %>% dplyr::select(-retx, -permno))
predictions_3_nn_model <- best_model_nn_3_layer_test[[1]] %>% predict(test_df_reduced %>% dplyr::select(-retx, -permno))
predictions_3_nn_model[ , 1]
postResample(predictions_3_nn_model[ , 1], test_df_reduced$retx)
best_model_nn_2_layers_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0, 0.1, 0.3, 0.4),
num_layers = 2,
batch_sizes = list(500, 1000, 7000),
epochs = 200,
optimizer = sgd_opt,
patience_list = list(1, 2, 5, 20,25, 40, 50),
verbose = 0
)
build_nn_model_3_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output %<>%
layer_dense(units = 8)
model <- keras_model(input, output)
return(model)
}
build_nn_model_2_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 100, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 50)
model <- keras_model(input, output)
return(model)
}
build_nn_model_1_layer <- function(selected_train_df, selected_spec) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32)
model <- keras_model(input, output)
return(model)
}
build_model <- function(selected_train_df, selected_spec, num_layers, batch_normalization, dropout_rate) {
if (num_layers == 1) {
output_model = build_nn_model_1_layer(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 2) {
output_model = build_nn_model_2_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 3) {
output_model = build_nn_model_3_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 5) {
output_model = build_nn_model_5_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
return (output_model)
}
best_model_nn_2_layers_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0, 0.1, 0.3, 0.4),
num_layers = 2,
batch_sizes = list(500, 1000, 7000),
epochs = 200,
optimizer = sgd_opt,
patience_list = list(1, 2, 5, 20,25, 40, 50),
verbose = 0
)
best_model_nn_1_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0, 0.1, 0.3, 0.4),
num_layers = 1,
batch_sizes = list(500, 1000, 7000),
epochs = 200,
optimizer = sgd_opt,
patience_list = list(1, 2, 5, 20,25, 40, 50),
verbose = 0
)
best_model_nn_3_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0, 0.1, 0.3, 0.4),
num_layers = 3,
batch_sizes = list(500, 1000, 7000),
epochs = 200,
optimizer = sgd_opt,
patience_list = list(1, 2, 5, 20,25, 40, 50),
verbose = 0
)
predictions_3_nn_model <- best_model_nn_3_layer_test[[1]] %>% predict(test_df_reduced %>% dplyr::select(-retx, -permno))
predictions_3_nn_model[ , 1]
postResample(predictions_3_nn_model[ , 1], test_df_reduced$retx)
predictions_2_nn_model <- best_model_nn_2_layers_test[[1]] %>% predict(test_df_reduced %>% dplyr::select(-retx, -permno))
predictions_2_nn_model[ , 1]
postResample(predictions_1_nn_model[ , 1], test_df_reduced$retx)
postResample(predictions_2_nn_model[ , 1], test_df_reduced$retx)
predictions_1_nn_model <- best_model_nn_1_layer_test[[1]] %>% predict(test_df_reduced %>% dplyr::select(-retx, -permno))
predictions_1_nn_model[ , 1]
postResample(predictions_1_nn_model[ , 1], test_df_reduced$retx)
best_model_nn_1_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0, 0.1, 0.3, 0.4),
num_layers = 1,
batch_sizes = list(500, 1000, 7000),
epochs = 200,
optimizer = sgd_opt,
patience_list = list(1, 2, 5, 20,25, 40, 50),
verbose = 0
)
build_model <- function(selected_train_df, selected_spec, num_layers, batch_normalization, dropout_rate) {
if (num_layers == 1) {
output_model = build_nn_model_1_layer(selected_train_df, selected_spec)
}
else if (num_layers == 2) {
output_model = build_nn_model_2_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 3) {
output_model = build_nn_model_3_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 5) {
output_model = build_nn_model_5_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
return (output_model)
}
best_model_nn_1_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0, 0.1, 0.3, 0.4),
num_layers = 1,
batch_sizes = list(500, 1000, 7000),
epochs = 200,
optimizer = sgd_opt,
patience_list = list(1, 2, 5, 20,25, 40, 50),
verbose = 0
)
build_nn_model_5_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 4, activation = "relu") %>%
layer_dropout(dropout_rate) %>%
layer_dense(units = 2)
model <- keras_model(input, output)
return (model)
}
build_nn_model_3_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output %<>%
layer_dense(units = 8)
model <- keras_model(input, output)
return(model)
}
build_nn_model_2_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16)
model <- keras_model(input, output)
return(model)
}
build_nn_model_1_layer <- function(selected_train_df, selected_spec) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32)
model <- keras_model(input, output)
return(model)
}
build_model <- function(selected_train_df, selected_spec, num_layers, batch_normalization, dropout_rate) {
if (num_layers == 1) {
output_model = build_nn_model_1_layer(selected_train_df, selected_spec)
}
else if (num_layers == 2) {
output_model = build_nn_model_2_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 3) {
output_model = build_nn_model_3_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 5) {
output_model = build_nn_model_5_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
return (output_model)
}
## Five layer
best_model_nn_5_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0, 0.1, 0.3, 0.4),
num_layers = 5,
batch_sizes = list(500, 1000, 7000),
epochs = 200,
optimizer = sgd_opt,
patience_list = list(1, 2, 5, 20,25, 40, 50),
verbose = 0
)
library(tensorflow)
library(keras)
library(tfdatasets)
library(reticulate)
conda_python(envname = "r-reticulate") # Create miniconda enviroment (if not already done)
tensorflow::use_condaenv("r-reticulate") # Specify enviroment to tensorflow
######### Dataframe with all companies using only variance and correlation filter#############
# Load all
load(file = "cached_data/train_test.Rdata")
make_0_benchmark <- function(selected_test_df) {
#' Makes a zero benchmark to compare models
#' @
benchmark_0 <- postResample(rep(0, nrow(selected_test_df)), selected_test_df$retx)
return (benchmark_0)
}
print_dot_callback <- callback_lambda(
#' Simplified callback, showing dots instead of full loss/validation error plots
on_epoch_end = function(epoch, logs) {
if (epoch %% 80 == 0) cat("\n")
cat(".")
}
)
build_nn_model_5_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 4, activation = "relu") %>%
layer_dropout(dropout_rate) %>%
layer_dense(units = 2)
model <- keras_model(input, output)
return (model)
}
build_nn_model_3_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output %<>%
layer_dense(units = 8)
model <- keras_model(input, output)
return(model)
}
build_nn_model_2_layers <- function(selected_train_df, selected_spec, batch_normalization, dropout_rate) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dropout(dropout_rate)
if (batch_normalization == T) {output %<>% layer_batch_normalization()}
output  %<>%
layer_dense(units = 16)
model <- keras_model(input, output)
return(model)
}
build_nn_model_1_layer <- function(selected_train_df, selected_spec) {
input <- layer_input_from_dataset(selected_train_df %>% dplyr::select(-retx))
output <- input %>%
layer_dense_features(dense_features(selected_spec)) %>%
layer_dense(units = 32)
model <- keras_model(input, output)
return(model)
}
build_model <- function(selected_train_df, selected_spec, num_layers, batch_normalization, dropout_rate) {
if (num_layers == 1) {
output_model = build_nn_model_1_layer(selected_train_df, selected_spec)
}
else if (num_layers == 2) {
output_model = build_nn_model_2_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 3) {
output_model = build_nn_model_3_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
else if (num_layers == 5) {
output_model = build_nn_model_5_layers(selected_train_df, selected_spec, batch_normalization, dropout_rate)
}
return (output_model)
}
grid_search_nn_model_generaL_optimizer <- function(model_train_df, dropout_rates, num_layers,
epochs, batch_sizes, optimizer, patience_list,  verbose) {
selected_spec <- feature_spec(model_train_df, retx ~ . ) %>%
step_numeric_column(all_numeric(), -costat, normalizer_fn = scaler_standard()) %>% # Scale numeric features
step_categorical_column_with_vocabulary_list(costat) %>%  # non-numeric variables
fit()
best_MAE <- Inf
best_model <- NA
best_history <- NA
batch_normalizations <- list(T, F)
for (dropout_rate in dropout_rates) {
for (batch_normalization in batch_normalizations) {
for (batch_size in batch_sizes) {
for (patience in patience_list) {
selected_model = build_model(model_train_df, selected_spec, num_layers, batch_normalization, dropout_rate)
reduce_lr = callback_reduce_lr_on_plateau(monitor = "val_loss", patience = patience)
new_early_stop = callback_early_stopping(monitor = "val_loss", patience = patience + 10)
new_model = selected_model %>%
compile(
loss = "mse",
optimizer = optimizer,
metrics = list("mean_absolute_error"))
new_history = new_model %>%
fit(
x = model_train_df %>% dplyr::select(-retx),
y = model_train_df$retx,
epochs = epochs,
batch_size = batch_size,
validation_split = 0.2,
verbose = verbose,
callbacks = list(print_dot_callback, reduce_lr, new_early_stop) #Print simplified dots, and stop learning when validation improvements stalls
)
mae_list_length =  new_history$metrics$val_mean_absolute_error %>% length()
new_mae =  new_history$metrics$val_mean_absolute_error[[mae_list_length]]
print(paste("> MAE of new model", new_mae))
if (new_mae < best_MAE) {
best_history <- new_history
best_model <- new_model
best_MAE <- new_mae
print(paste(">New best model. MAE of new model", best_MAE))
print(paste(">Batch size", batch_size))
print(paste(">dropout_rate", dropout_rate))
print(paste("> Patience", patience))
print(paste(">Batch normalization", batch_normalization))
}
}
}
}
}
return (list(best_model, best_history))
}
adam_opt = optimizer_adam()
sgd_opt = optimizer_sgd(learning_rate = 0.8)
############################## TESTING #################################
## Single layer
best_model_nn_1_layer_test <- grid_search_nn_model_generaL_optimizer(train_df_reduced,
dropout_rates = list(0, 0.1, 0.3, 0.4),
num_layers = 1,
batch_sizes = list(500, 1000, 7000),
epochs = 200,
optimizer = sgd_opt,
patience_list = list(1, 2, 5, 20,25, 40, 50),
verbose = 0
)
