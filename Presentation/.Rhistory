# Group Presentation
# Student numbers: s164142, s174858
# Theme: Classification using SVM (Support Vector Machine)
# Set WD
#setwd("~/OneDrive - Norges Handelsh√∏yskole/MASTER/FIE453/Group presentation")
#setwd("Desktop/Repositories/FIE453/data")
# Libraries
require(tidyverse)
require(magrittr)
require(caret)
require(kableExtra)
require(yardstick)
# Load data
load("merged.Rdata")
# Looking at the first 10 appearence of companies
permno <- merged %>%
select(PERMNO) %>%
unique() %>%
head(10)
# Filtering the data frame containing only the 10 first companies
df <- merged %>%
filter(PERMNO %in% permno$PERMNO)
# Replacing the NA's with 0
df[is.na(df)] <- 0
# Retrieving all the columns without all the columns being 0
columns.without.all.zero <-
df %>%
apply(MARGIN = 2, FUN = function(x) all(x == 0)) %>%
as.data.frame() %>%
filter(. == FALSE) %>%
rownames()
# Data frame only containing useful columns
df %<>%
select(all_of(columns.without.all.zero))
# Retrieving all the columns with duplicates
columns.with.all.duplicates <-
df %>%
apply(MARGIN = 2, FUN = function(x) if(length(c(unique(x))) == 1) return(TRUE) else return(FALSE)) %>%
as.data.frame() %>%
filter(. == TRUE) %>%
rownames()
# Data frame only containing useful columns
df %<>%
select(!columns.with.all.duplicates)
### Variable selection ####
# Removing irrelevant or almost perfect correlated columns
non_numeric <- c("RETX",
"date",
"datadate",
"fyearq",
"fqtr",
"datacqtr",
"datafqtr")
non_numeric_strict <-
c("RETX",
"date",
"datadate",
"fyearq",
"fqtr",
"datacqtr",
"datafqtr",
"aol2q",
"tfvaq",
"txpq",
"doq",
"xidoq",
"derlltq",
"fyr")
df %<>%
select(-one_of(non_numeric))
### Add binary label
df %<>%
mutate(positive_return = case_when(RET > 0 ~ 1, TRUE ~ 0),
positive_return = as.factor(positive_return)) %>%
select(-RET)
### Class Balance of positive returns ###
# Is accuracy a good performance measure
df %>% ggplot(aes(x = positive_return)) +
geom_bar() +
scale_colour_manual(values = c("black", "orange")) +
theme_bw() +
labs(title = "Distribution of positive returns labels",
x = "Positive Returns 0/1",
y = "Count")
# SVM --------------------------------------------------------------------------
# Size of the train-test split and number of observations in data frame
### Split train and test data
size <- 0.8
n <- nrow(df)
train_indices <- sample(1:n, size = floor(n*size))
train_df <- df[train_indices, ]
test_df  <- df[-train_indices, ]
#
# Performing SVM using the Caret package
#
perform_svm <- function() {
set.seed(123)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3,
savePredictions = T)
svm_model_all_pca <- caret::train(positive_return~.,
method = "svmPoly",
data = train_df,
trControl  = train_control,
#preProcess = c("pca"),
preProcess = c("center", "scale", "pca"),
tunelength = 4,
allowParallel=TRUE)
svm_model_all_scaled <- caret::train(positive_return~.,
method = "svmPoly",
data = train_df,
trControl  = train_control,
preProcess = c("center", "scale"),
tunelength = 4,
allowParallel=TRUE)
###### Modelling only few features #####
subset_train_df <- train_df %>%
select(c(positive_return, PRC, VOL, vwretd))
svm_model_subset_pca <- caret::train(positive_return~.,
method = "svmPoly",
data = subset_train_df,
trControl  = train_control,
#preProcess = c("pca"),
preProcess = c("center", "scale", "pca"),
tunelength = 4)
svm_model_subset_scaled <- caret::train(positive_return~.,
method = "svmPoly",
data = subset_train_df,
trControl  = train_control,
preProcess = c("center", "scale"),
tunelength = 4)
save(svm_model_all_pca, svm_model_all_scaled, svm_model_subset_pca, svm_model_subset_scaled, file = "svm_model.Rdata")
}
#perform_svm()
load(file = "svm_model.Rdata")
train_df$positive_return <- levels(train_df$positive_return)=c("Yes","No")
levels(train_df$positive_return)=c("Yes","No")
train_df$positive_return
gc_ctrl1 <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = TRUE)
install.packages("caret", "yardstick")
install.packages(c("caret", "yardstick"))
require(tidyverse)
require(magrittr)
require(caret)
require(kableExtra)
require(yardstick)
require(tidyverse)
require(magrittr)
require(caret)
require(kableExtra)
require(yardstick)
require(tidyverse)
require(magrittr)
require(caret)
require(kableExtra)
require(yardstick)
gc_ctrl1 <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = TRUE)
gc_train1 <- train(positive_return~.,
data = train_df,
method = "svmRadial",
# train() use its default method of calculating an analytically derived estimate for sigma
tuneLength = 5,# 5 arbitrary values for C and sigma = 25 models
trControl = gc_ctrl1,
preProc = c("center", "scale"),
metric = "ROC",
verbose = FALSE)
gc_train1 <- train(positive_return~.,
data = train_df,
method = "svmRadial",
# train() use its default method of calculating an analytically derived estimate for sigma
tuneLength = 5,# 5 arbitrary values for C and sigma = 25 models
trControl = gc_ctrl1,
preProc = c("center", "scale"),
metric = "ROC",
verbose = FALSE)
max(gc_train1$results[,"ROC"])
# ROC using pROC
gc_prob <- predict(gc_train1, newdata = test_df %>% select(-positive_return), type = "prob")
gc_pROC <- roc(response = test_df$positive_return, predictor = gc_prob[, "Yes"])
library(pROC)
library(plotROC)
# ROC using pROC
gc_prob <- predict(gc_train1, newdata = test_df %>% select(-positive_return), type = "prob")
gc_pROC <- roc(response = test_df$positive_return, predictor = gc_prob[, "Yes"])
plot(gc_pROC)
gc_pROC$auc
ROC_df <- tibble(x = gc_pROC$specificities  , y = gc_pROC$sensitivities) %>%
mutate(fpr = 1- x)
ROC_df %>% ggplot() + geom_line(aes(x = fpr, y = y))
ROC_df %>% ggplot() + geom_line(aes(x = fpr, y = y)) + geom_abline(slope =  1)
ROC_df %>% ggplot() + geom_line(aes(x = fpr, y = y, color = "Specificity/fpr")) + geom_abline(slope =  1)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = y, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic()
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = y, color = "Specificity/fpr")) +
geom_abline(slope =  1, color = "baseline") +
theme_classic()
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = y, color = "Specificity/fpr")) +
geom_abline(slope =  1, aes(color = "baseline")) +
theme_classic()
ROC_df <- tibble(fpr =  1- gc_pROC$specificities  , Specificity = 1- gc_pROC$sensitivities)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = y, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic()
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic()
ROC_df <- tibble(fpr =  1- gc_pROC$specificities  , Specificity = 1- gc_pROC$specificities)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic()
ROC_df <- tibble(fpr =  1- gc_pROC$specificities  , Specificity = 1- gc_pROC$specificities)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic()
ROC_df <- tibble(fpr =  1- gc_pROC$specificities  , Specificity = gc_pROC$specificities)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic()
ROC_df <- tibble(fpr =  1- gc_pROC$specificities  , Specificity = gc_pROC$sensitivities)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic()
ROC_df <- tibble(x = gc_pROC$specificities  , y = gc_pROC$sensitivities) %>%
mutate(fpr = 1- x)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic()
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic()
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = y, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic()
ROC_df <- tibble(fpr =  1- gc_pROC$specificities  , Specificity = gc_pROC$sensitivities)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic()
# ROC using pROC
gc_prob <- predict(gc_train1, newdata = test_df, type = "prob")
gc_pROC <- roc(response = test_df$positive_return, predictor = gc_prob[, "Yes"])
ROC_df <- tibble(fpr =  1- gc_pROC$specificities  , Specificity = gc_pROC$sensitivities)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic()
ROC_df <- tibble(fpr =  1- gc_pROC$specificities  , Specificity = gc_pROC$sensitivities)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic()
produce_roc <- function(model, title,  train_df, test_df) {
#'
#'
gc_prob <- predict(model, newdata = test_df, type = "prob")
gc_pROC <- roc(response = test_df$positive_return, predictor = gc_prob[, "Yes"])
ROC_df <- tibble(fpr =  1- gc_pROC$specificities  , Specificity = gc_pROC$sensitivities)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "Specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic() +
labs(title = title, x = "False Positive Rate", y = "Specificity")
}
produce_roc(gc_train1, "ROC", train_df, test_df)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic() +
labs(title = title, x = "False Positive Rate", y = "Specificity")
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic() +
labs(title = title, x = "False Positive Rate", y = "Specificity")
produce_roc <- function(model, title,  train_df, test_df) {
#'
#'
gc_prob <- predict(model, newdata = test_df, type = "prob")
gc_pROC <- roc(response = test_df$positive_return, predictor = gc_prob[, "Yes"])
ROC_df <- tibble(fpr =  1- gc_pROC$specificities  , Specificity = gc_pROC$sensitivities)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = Specificity, color = "specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic() +
labs(title = title, x = "False Positive Rate", y = "Specificity")
}
produce_roc(gc_train1, "ROC", train_df, test_df)
gc_train1 <- train(positive_return~.,
data = train_df,
method = c("svmRadial", "svmPoly"),
# train() use its default method of calculating an analytically derived estimate for sigma
tuneLength = 5,# 5 arbitrary values for C and sigma = 25 models
trControl = gc_ctrl1,
preProc = c("center", "scale"),
metric = "ROC",
verbose = FALSE)
produce_roc(svm_model_all_pca, "ROC", train_df, test_df)
svm_model_all_pca <- caret::train(positive_return~.,
method = "svmPoly",
data = train_df,
trControl  = train_control,
#preProcess = c("pca"),
preProcess = c("center", "scale", "pca"),
tunelength = 4,
metric = "ROC",
allowParallel=TRUE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3,
savePredictions = T)
svm_model_all_pca <- caret::train(positive_return~.,
method = "svmPoly",
data = train_df,
trControl  = train_control,
#preProcess = c("pca"),
preProcess = c("center", "scale", "pca"),
tunelength = 4,
metric = "ROC",
allowParallel=TRUE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3,
savePredictions = T,
classProbs = T)
svm_model_all_pca <- caret::train(positive_return~.,
method = "svmPoly",
data = train_df,
trControl  = train_control,
#preProcess = c("pca"),
preProcess = c("center", "scale", "pca"),
tunelength = 4,
metric = "ROC",
allowParallel=TRUE)
gc_train1 <- train(positive_return~.,
data = train_df,
method = 'svmPoly',
# train() use its default method of calculating an analytically derived estimate for sigma
tuneLength = 5,# 5 arbitrary values for C and sigma = 25 models
trControl = gc_ctrl1,
preProc = c("center", "scale"),
metric = "ROC",
verbose = FALSE)
gc_train1 <- train(positive_return~.,
data = train_df,
method = 'svmRadial',
# train() use its default method of calculating an analytically derived estimate for sigma
tuneLength = 5,# 5 arbitrary values for C and sigma = 25 models
trControl = gc_ctrl1,
preProc = c("center", "scale"),
metric = "ROC",
verbose = FALSE)
produce_roc(svm_model_all_pca, "ROC", train_df, test_df)
produce_roc(svm_model_all_pca, "ROC", train_df, test_df)
produce_roc(gc_train1, "ROC", train_df, test_df)
produce_roc(svm_model_all_pca, "ROC", train_df, test_df)
produce_roc(gc_train1, "ROC", train_df, test_df)
produce_roc(svm_model_all_pca, "ROC", train_df, test_df)
produce_roc <- function(model, title, test_df) {
#' Function which produces a ROC plot based on the input model, title and
#' datasets
gc_prob <- predict(model, newdata = test_df, type = "prob")
gc_pROC <- roc(response = test_df$positive_return, predictor = gc_prob[, "Yes"])
ROC_df <- tibble(fpr =  1- gc_pROC$specificities  , tpr = gc_pROC$sensitivities)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = tpr, colour = "specificity/fpr")) +
geom_abline(slope =  1, colour = "random prediction") +
theme_classic() +
labs(title = title, x = "False Positive Rate", y = "True Positive Rate")
}
produce_roc(gc_train1, "ROC", test_df)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = tpr, colour = "specificity/fpr")) +
geom_abline(slope =  1, colour = "red") +
theme_classic() +
labs(title = title, x = "False Positive Rate", y = "True Positive Rate")
produce_roc <- function(model, title, test_df) {
#' Function which produces a ROC plot based on the input model, title and
#' datasets
gc_prob <- predict(model, newdata = test_df, type = "prob")
gc_pROC <- roc(response = test_df$positive_return, predictor = gc_prob[, "Yes"])
ROC_df <- tibble(fpr =  1- gc_pROC$specificities  , tpr = gc_pROC$sensitivities)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = tpr, colour = "specificity/fpr")) +
geom_abline(slope =  1, colour = "red") +
theme_classic() +
labs(title = title, x = "False Positive Rate", y = "True Positive Rate")
}
produce_roc(gc_train1, "ROC", test_df)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = tpr, colour = "specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic() +
labs(title = title, x = "False Positive Rate", y = "True Positive Rate")
}
produce_roc <- function(model, title, test_df) {
#' Function which produces a ROC plot based on the input model, title and
#' datasets
gc_prob <- predict(model, newdata = test_df, type = "prob")
gc_pROC <- roc(response = test_df$positive_return, predictor = gc_prob[, "Yes"])
ROC_df <- tibble(fpr =  1- gc_pROC$specificities  , tpr = gc_pROC$sensitivities)
ROC_df %>% ggplot() +
geom_line(aes(x = fpr, y = tpr, colour = "specificity/fpr")) +
geom_abline(slope =  1) +
theme_classic() +
labs(title = title, x = "False Positive Rate", y = "True Positive Rate")
}
produce_roc(gc_train1, "ROC", test_df)
produce_roc(svm_model_all_pca, "ROC", test_df)
produce_roc(svm_model_all_pca_radial, "ROC", test_df)
help(roc)
